import Head from "next/head";
import { Layout, MuliColumnVideo } from "~/components/Components";
import ErrorPage from "~/components/Error";

import { api } from "~/utils/api";
import CardSkeleton from "~/components/CardSkeleton";
import { useRouter } from "next/router";
import { SingleColumnVideo } from "~/components/VideoComponent";

export default function SearchPage() {
  // const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const router = useRouter();
  const searchQuery = router.query.q;
  // console.log(searchQuery);

  const { data, isLoading, error } = api.video.getVideosBySearch.useQuery(
    searchQuery as string,
  );
  // console.log(data?.videos);
  // console.log(data?.users);

  const Message = () => {
    if (isLoading) {
      return <CardSkeleton cards={30} />;
    } else if (error ?? !data) {
      return <ErrorPage title="Not found" desc="No videos or results found" />;
    } else if (data.videos.length === 0) {
      return (
        <ErrorPage
          title="No found results"
          desc="Try refresh tab again or check connects your networks"
        />
      );
    }
  };

  return (
    <>
      <Head>
        <title className="text-lg">Youtube</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {/* Main */}

        <div className="h-full">
          {!data ??
            (error && (
              // <ErrorPage />
              <Message />
            ))}

          {data && (
            <>
              {/* // Todo: Category explore */}
              <SingleColumnVideo
                users={(data?.users ?? []).map((user) => ({
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
                  image: user?.image ?? "",
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
                  name: user?.name ?? "",
                }))}
                videos={(data?.videos ?? []).map((video) => ({
                  id: video?.id ?? "",
                  title: video?.title ?? "",
                  description: video?.description ?? "",
                  thumbnailUrl: video?.thumbnailUrl ?? "",
                  createdAt: video?.createdAt ?? new Date(),
                  views: video?.views ?? 0,
                }))}
              />
            </>
          )}

          {data?.videos.length === 0 && (
            <>
              <Message />
            </>
          )}
        </div>
        {/* {!data ?? error ? (
          // <ErrorPage />
          <Message />
        ) : (
          <>
              <MuliColumnVideo
                users={(data?.users ?? []).map((user) => ({
                  image: user?.image ?? "",
                  name: user?.name ?? "",
                }))}
                videos={(data?.videos ?? []).map((video) => ({
                  id: video?.id ?? "",
                  title: video?.title ?? "",
                  thumbnailUrl: video?.thumbnailUrl ?? "",
                  createdAt: video?.createdAt ?? new Date(),
                  views: video?.views ?? 0,
                }))}
              />
           
          </>
        )} */}

        {/* <div className="bg-white"> <SliderTabs /></div> */}
      </Layout>
    </>
  );
}

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   // const { data: secretMessage } = api.post.getSecretMessage.useQuery(
//   //   undefined, // no input
//   //   { enabled: sessionData?.user !== undefined },
//   // );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {/* {secretMessage && <span> - {secretMessage}</span>} */}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
