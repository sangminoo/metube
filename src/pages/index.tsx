import Head from "next/head";
import { Layout, MuliColumnVideo } from "~/components/Components";
import ErrorPage from "~/components/Error";

import { api } from "~/utils/api";
import CardSkeleton from "~/components/CardSkeleton";
import { useEffect } from "react";
import { type NextPage } from "next";

const Home: NextPage = () => {
  // const hello = api.post.hello.useQuery({ text: "from tRPC" });

  const res = api.video.getRandomVideos.useQuery(40, { enabled: false });
  const { data, isLoading, error, refetch: refetchSidebarVideos } = res;
  // console.log(isLoading);
  // console.log(data?.videos.length);

  useEffect(() => {
    if (!data) {
      void refetchSidebarVideos(); // manually refetch sidebarVideos if they do not exist
    }

    const refreshVideo = setInterval(() => {
      void refetchSidebarVideos();
    }, 600000);

    return () => clearInterval(refreshVideo);
  }, []);

  const Message = () => {
    if (error ?? !data) {
      return (
        <ErrorPage
          title="No results found"
          desc="No videos. Try refresh or check your network again"
        />
      );
    }
  };

  return (
    <>
      <Head>
        <title className="text-lg">Youtube</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="mt-[80px] grid  h-full grid-cols-1 gap-y-8 overflow-hidden sm:mx-4 sm:grid-cols-2 md:gap-x-1 md:gap-y-8 lg:grid-cols-3    xl:grid-cols-3 2xl:grid-cols-4 2xl:gap-x-1 3xl:grid-cols-5">
          {/* Main */}
          {!data ??
            (error && (
              // <ErrorPage />
              <Message />
            ))}
          {data?.videos.length === 0 && <Message />}
          <>
            {isLoading && <CardSkeleton cards={30} />}
            {data?.videos && (
              <MuliColumnVideo
                users={(data?.users ?? []).map((user) => ({
                  image: user?.image ?? "",
                  name: user?.name ?? "",
                }))}
                videos={(data?.videos ?? []).map((video) => ({
                  id: video?.id ?? "",
                  title: video?.title ?? "",
                  description: video?.description ?? "",
                  thumbnailUrl: video?.thumbnailUrl ?? "",
                  createdAt: video?.createdAt ?? new Date(),
                  views: video?.views ?? 0,
                }))}
                isLoading={isLoading}
              />
            )}
          </>
        </div>
      </Layout>
    </>
  );
};
export default Home;

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   // const { data: secretMessage } = api.post.getSecretMessage.useQuery(
//   //   undefined, // no input
//   //   { enabled: sessionData?.user !== undefined },
//   // );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {/* {secretMessage && <span> - {secretMessage}</span>} */}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
